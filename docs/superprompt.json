{
    "title": "Context-Driven AI Code Review & Implementation Prompt",
    "globalInstructions": [
      "READ EACH FILE AGAIN to ensure full project context before proceeding.",
      "Continue updating the project steps with what is completed, what is in progress, and any new implementation details—unless there is something critical missing or incomplete.",
      "Remember: You are an agent with the ability to run and install commands as needed. However, if you must update SQL on Supabase, you must provide a code block that can be manually executed in Supabase. If additional details about tables or formatting are required, request them explicitly.",
      "MAKE SURE TO NOT DELETE ANY OF THE INSTRUCTIONS ALREADY IN THE FILE."
    ],
    "purpose": "Provide a high-level and detailed approach to code analysis, emulating a senior developer mindset by leveraging full architectural context, historical references, and file grouping based on functionality. Ensure the AI agent is aware of its ability to run commands and the manual steps required for Supabase SQL updates.",
    "coreAnalysisApproach": {
      "architecturalOverview": {
        "rationale": "Many AI approaches read code line-by-line, which misses broader insights like concurrency pitfalls or hidden dependencies across features. A senior-level approach starts by understanding the overall architecture, recent merges, and feature interdependencies.",
        "keyActions": [
          "Identify core modules (Auth, Database, Notifications, etc.).",
          "Review known interdependencies (e.g., how auth logic might affect socket reconnections).",
          "Look for references to relevant PRs, merges, or historical decisions in the codebase."
        ]
      },
      "fileGrouping": {
        "rationale": "Related files should be analyzed together. This prevents ‘siloed’ analysis and encourages pattern recognition across similar or dependent modules.",
        "method": [
          "Group files by features or functionality (authentication, database, notifications, etc.).",
          "Prioritize large or critical files first to establish an understanding of key logic before moving on to ancillary components.",
          "Note any shared utilities or patterns across multiple groups."
        ]
      },
      "promptConstruction": {
        "rationale": "Context-first prompts help the AI deliver senior-level code reviews, providing relevant background, historical merges, and system-wide concerns up front.",
        "method": [
          "For each group, prepend a high-level summary: mention feature purpose, known vulnerabilities, or upcoming changes from other teams.",
          "Include references to performance constraints or concurrency hazards that might be impacted by new code.",
          "If any changes were recently made in a related PR, mention them to encourage thorough consideration of potential regressions."
        ]
      }
    },
    "analysisFocusAreas": [
      {
        "name": "Security & Authentication",
        "details": "Check token refresh logic, session handling, and any modifications that could introduce vulnerabilities in high-traffic or concurrent environments."
      },
      {
        "name": "Performance & Concurrency",
        "details": "Identify potential race conditions, especially around WebSocket connections or any shared state that might be updated by multiple processes."
      },
      {
        "name": "Consistency & Patterns",
        "details": "Flag any inconsistent naming, error-handling, or duplicated code that diverges from project conventions. Suggest refactors where appropriate."
      },
      {
        "name": "Historical References & Potential Regressions",
        "details": "Tie new changes back to recently merged PRs, past bug fixes, or any known architectural decisions (e.g., an existing workaround) that may be affected."
      }
    ],
    "implementationGuidance": {
      "sqlIntegration": {
        "note": "If the AI agent determines changes to the database schema are necessary, output the SQL statements in a fenced code block for manual execution in Supabase."
      },
      "installCommands": {
        "note": "The AI agent can provide or run install/upgrade commands when additional dependencies are needed, but must list them explicitly so the user can verify or run them if required."
      },
      "updatesToProjectFiles": {
        "note": "Any file modifications should preserve existing instructions. Clarify if partial functionality is acceptable, or if further improvements are needed for complete coverage."
      }
    },
    "usageInstructions": [
      "Begin by reviewing the entire codebase to build a mental map of features, dependencies, and historical merges.",
      "Group files based on functionality and significance. Summarize each group, referencing known interactions with other systems (like WebSocket handling or notification triggers).",
      "For each file group, lead with contextual information, mention known pitfalls or dependencies, then present the files for deeper analysis and feedback.",
      "If database schema changes are necessary, output the SQL statements in a code block for manual execution on Supabase. Confirm that these statements match the existing table definitions and constraints.",
      "Keep track of what’s completed, what’s in progress, and any new issues that arise. Update project steps to reflect your progress or proposed improvements."
    ]
  }
  